// src/components/symbol-detail/SourceCodeViewer.tsx
import React from 'react';
import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'; // Or your chosen theme
// Ensure languages are registered globally (e.g., in main.tsx or App.tsx)

interface SourceCodeViewerProps {
    sourceCode: string | null;
    language: string; // Determined by parent
}

// Custom style for SyntaxHighlighter, adapted from CodeViewerPanel
const syntaxHighlighterStyle = {
    ...vscDarkPlus, // Start with a base theme
    'pre[class*="language-"]': {
        ...vscDarkPlus['pre[class*="language-"]'],
        backgroundColor: 'hsl(var(--card))', // Use card background for the pre block
        margin: 0,
        padding: '1rem',
        // The Card component itself provides border radius and overflow:hidden.
        // If CardContent has p-0, this pre's corners will be clipped by the Card.
        // We can set specific bottom radius if needed, but full radius and letting parent clip is often fine.
        borderRadius: 'var(--radius)', // Match shadcn/ui border radius for the code block itself
        height: '100%', // Crucial for filling the panel
        overflow: 'auto', // Ensure scrollbars within the pre block
    },
    'code[class*="language-"]': {
        ...vscDarkPlus['code[class*="language-"]'],
        backgroundColor: 'transparent !important', // Code block itself should be transparent over pre's bg
        fontFamily: '"Fira Code", "Source Code Pro", Menlo, Monaco, Consolas, "Courier New", monospace',
        fontSize: '0.875rem', // 14px
        lineHeight: '1.6',
    },
    // Custom scrollbar styling (optional, works in WebKit browsers)
    'pre[class*="language-"]::-webkit-scrollbar': {
        width: '8px',
        height: '8px',
    },
    'pre[class*="language-"]::-webkit-scrollbar-track': {
        background: 'transparent', // Or hsl(var(--card)) if pre background is different
    },
    'pre[class*="language-"]::-webkit-scrollbar-thumb': {
        backgroundColor: 'hsl(var(--border))',
        borderRadius: '4px',
    },
    'pre[class*="language-"]::-webkit-scrollbar-thumb:hover': {
        backgroundColor: 'hsl(var(--muted-foreground))',
    },
};

export const SourceCodeViewer: React.FC<SourceCodeViewerProps> = ({ sourceCode, language }) => {
    if (!sourceCode) {
        return (
            <div className="flex items-center justify-center h-full p-4 text-muted-foreground bg-card rounded-b-md min-h-[100px]">
                {/* Ensure this placeholder respects card styling if it's the only content */}
                Source code not available.
            </div>
        );
    }

    return (
        // This div handles overall max height and scrolling for the container.
        // The SyntaxHighlighter's <pre> tag will handle its own background, padding, and internal scrolling if content exceeds its 100% height.
        // Parent CardContent in SymbolDetailPage has p-0.
        // Parent Card in SymbolDetailPage has overflow-hidden.
        <div className="max-h-[450px] h-full overflow-y-auto"> {/* Ensure h-full if max-h is not always met */}
            <SyntaxHighlighter
                language={language.toLowerCase()}
                style={syntaxHighlighterStyle}
                showLineNumbers
                wrapLines={true} // Wraps lines that exceed the width
                lineNumberStyle={{
                    color: 'hsl(var(--muted-foreground))',
                    minWidth: '3.5em',
                    paddingRight: '1em',
                    borderRight: '1px solid hsl(var(--border))',
                    userSelect: 'none',
                    fontSize: '0.875rem', // Match code font size
                }}
                customStyle={{ // Styles applied to the outer <pre> element generated by SyntaxHighlighter
                    height: '100%', // Make the <pre> fill the height of its max-h parent div
                    margin: 0,
                    fontSize: '0.875rem', // Consistent font sizing
                    // borderRadius is handled by the theme's 'pre' style override
                }}
                codeTagProps={{ // Styles applied to the inner <code> element
                    style: {
                        fontFamily: '"Fira Code", "Source Code Pro", Menlo, Monaco, Consolas, "Courier New", monospace',
                        // fontSize is handled by the theme's 'code' style override
                    }
                }}
            >
                {sourceCode.trimEnd()}
            </SyntaxHighlighter>
        </div>
    );
};