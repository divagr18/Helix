version: '3.8'

# Production Docker Compose Configuration
#
# This file provides production-ready settings for deploying Helix.
# Copy this to docker-compose.yml or use: docker-compose -f docker-compose.prod.yml up
#
# IMPORTANT: Before deploying to production:
# 1. Change all default passwords and secrets
# 2. Set up proper backup strategy for postgres_data volume
# 3. Configure SSL/TLS certificates
# 4. Review resource limits for your infrastructure
# 5. Set up monitoring and logging
# 6. Use managed database services for critical deployments

services:
  db:
    image: pgvector/pgvector:pg16
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./roles.sql:/docker-entrypoint-initdb.d/01-roles.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-helix}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-helix}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-helix}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # Uncomment to expose database (not recommended for production)
    # ports:
    #   - "5432:5432"
    networks:
      - helix-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  cache:
    image: redis:7-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-CHANGE_THIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - helix-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: >
      sh -c " echo 'Waiting for database...' && while ! nc -z db 5432; do sleep 1; done && echo 'Running migrations...' && python manage.py migrate && python manage.py collectstatic --noinput && echo 'Starting backend with Gunicorn...' && gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 --access-logfile - --error-logfile - "
    volumes:
      - repo_cache:/var/repos
      - static_files:/app/staticfiles
      - media_files:/app/media
    expose:
      - "8000"
    env_file:
      - ./.env
    environment:
      - DJANGO_DEBUG=False
      - DJANGO_ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/health/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - helix-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
    restart: always
    expose:
      - "80"
    networks:
      - helix-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: >
      sh -c " echo 'Waiting for backend...' && while ! nc -z backend 8000; do sleep 2; done && echo 'Starting Celery worker...' && celery -A config worker -l info --concurrency=4 --max-tasks-per-child=1000 "
    volumes:
      - repo_cache:/var/repos
      - media_files:/app/media
    env_file:
      - ./.env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - helix-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: >
      sh -c " echo 'Waiting for backend...' && while ! nc -z backend 8000; do sleep 2; done && echo 'Starting Celery beat...' && celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler "
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - helix-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_files:/usr/share/nginx/html/static:ro
      - media_files:/usr/share/nginx/html/media:ro
      # Uncomment and configure SSL certificates
      # - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - backend
      - frontend
    networks:
      - helix-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  repo_cache:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local

networks:
  helix-network:
    driver: bridge
