# Generated by Django 5.2.3 on 2025-07-04 21:06

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

# --- START: DATA MIGRATION FUNCTION ---
def create_orgs_for_existing_repos(apps, schema_editor):
    """
    For each user that currently owns repositories, create a default
    organization for them and assign all their existing repositories to it.
    """
    # Use apps.get_model to get the historical version of the models
    User = apps.get_model(settings.AUTH_USER_MODEL.split('.')[0], settings.AUTH_USER_MODEL.split('.')[1])
    Repository = apps.get_model('repositories', 'Repository')
    Organization = apps.get_model('repositories', 'Organization')
    OrganizationMember = apps.get_model('repositories', 'OrganizationMember')

    # We need to find users based on the *old* 'user' foreign key on the Repository model.
    # Since that field is being removed in this same migration, we need to be careful.
    # We can get all distinct user IDs from the repository table before the field is removed.
    # Note: This requires the old 'user' field to still exist when this function runs.
    
    # A temporary workaround to get the old user foreign key if it's already removed from the model state
    # This is a bit of a hack but necessary for complex migrations.
    # We query the table directly.
    from django.db import connection
    cursor = connection.cursor()
    cursor.execute("SELECT DISTINCT user_id FROM repositories WHERE user_id IS NOT NULL")
    user_ids = [row[0] for row in cursor.fetchall()]

    for user_id in user_ids:
        try:
            user = User.objects.get(id=user_id)
            
            # Create a default organization for the user
            org_name = f"{user.username}'s Workspace"
            new_org, created = Organization.objects.get_or_create(
                owner=user,
                defaults={'name': org_name}
            )
            if created:
                print(f"Created org '{org_name}' for user '{user.username}'.")

            # Make the owner a member of their new organization if they aren't already
            OrganizationMember.objects.get_or_create(
                organization=new_org,
                user=user,
                defaults={'role': 'OWNER'}
            )

            # Re-assign all of this user's repositories to their new organization
            # We need to query repositories using the old 'user_id' column name.
            # The ORM might not know about it, so we use .extra() for a raw WHERE clause.
            updated_count = Repository.objects.filter(user_id=user_id).update(organization=new_org, added_by=user)
            if updated_count > 0:
                print(f"Migrated {updated_count} repositories for user '{user.username}' to org '{new_org.name}'.")

        except User.DoesNotExist:
            print(f"Warning: User with ID {user_id} found on repositories but not in users table. Skipping.")


class Migration(migrations.Migration):

    dependencies = [
        ('repositories', '0028_moduledependency'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Step 1: Create the new Organization model.
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the organization or workspace.', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(help_text='The user who created and owns the organization.', on_delete=django.db.models.deletion.PROTECT, related_name='owned_organizations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organizations',
                'ordering': ['name'],
            },
        ),
        # Step 2: Create the new OrganizationMember model.
        migrations.CreateModel(
            name='OrganizationMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('OWNER', 'Owner'), ('ADMIN', 'Admin'), ('MEMBER', 'Member')], default='MEMBER', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='repositories.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organization_members',
                'ordering': ['organization__name', 'user__username'],
                'unique_together': {('organization', 'user')},
            },
        ),
        # Step 3: Add the new nullable 'organization' and 'added_by' fields to Repository.
        migrations.AddField(
            model_name='repository',
            name='organization',
            field=models.ForeignKey(help_text='The organization that owns this repository.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='repositories', to='repositories.organization'),
        ),
        migrations.AddField(
            model_name='repository',
            name='added_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='added_repositories', to=settings.AUTH_USER_MODEL),
        ),
        # Step 4: Run our custom Python script to populate the new fields.
        # This runs *before* we make the 'organization' field required.
        migrations.RunPython(create_orgs_for_existing_repos, migrations.RunPython.noop),
        
        # Step 5: Now that the data is populated, alter the 'organization' field to be non-nullable.
        migrations.AlterField(
            model_name='repository',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repositories', to='repositories.organization'),
            # Note: `null=False` is the default, so we don't need to specify it.
        ),
        # Step 6: Finally, remove the old 'user' field.
        migrations.RemoveField(
            model_name='repository',
            name='user',
        ),
    ]